"""Tests for :mod:`raggd.core.config`."""

from __future__ import annotations

from pathlib import Path

import pytest

from raggd.core.config import (
    AppConfig,
    ModuleToggle,
    load_config,
    load_packaged_defaults,
    render_user_config,
)


@pytest.fixture()
def defaults() -> dict[str, object]:
    return {
        "workspace": "/var/tmp/raggd",
        "log_level": "info",
        "modules": {
            "alpha": {
                "enabled": True,
                "extras": ["alpha-extra", "alpha-extra"],
            },
            "beta": {
                "enabled": False,
            },
        },
    }


def test_load_config_precedence(defaults: dict[str, object]) -> None:
    config = load_config(
        defaults=defaults,
        user_config={
            "log_level": "warning",
            "modules": {"alpha": {"enabled": False}},
        },
        env_config={
            "log_level": "error",
            "modules": {"gamma": {"enabled": True}},
        },
        cli_overrides={
            "log_level": "debug",
            "workspace": "~/workspaces/raggd",
        },
        module_overrides={
            "alpha": {"enabled": True},
            "beta": ModuleToggle(enabled=True),
        },
    )

    assert isinstance(config, AppConfig)
    assert config.log_level == "DEBUG"
    assert config.workspace == Path("~/workspaces/raggd").expanduser()

    alpha = config.modules["alpha"]
    assert alpha.enabled is True
    assert alpha.extras == ("alpha-extra",)

    beta = config.modules["beta"]
    assert beta.enabled is True

    gamma = config.modules["gamma"]
    assert gamma.enabled is True
    assert gamma.extras == ()


def test_load_config_invalid_override_type(defaults: dict[str, object]) -> None:
    with pytest.raises(TypeError):
        load_config(
            defaults=defaults,
            module_overrides={"alpha": 123},
        )


def test_render_user_config_includes_comments(defaults: dict[str, object]) -> None:
    config = load_config(defaults=defaults)
    rendered = render_user_config(config)

    assert "Generated by raggd init" in rendered
    assert "Precedence: CLI flags" in rendered
    assert "workspace" in rendered
    assert "modules" in rendered
    # Extras should be serialized as a list in TOML.
    assert "extras = [\"alpha-extra\"]" in rendered

    minimal = render_user_config(config, include_defaults=False)
    assert "Generated by" not in minimal
    assert minimal.strip().startswith("workspace")



def test_load_packaged_defaults_resource() -> None:
    defaults = load_packaged_defaults()

    assert defaults["workspace"] == "~/.raggd"
    assert defaults["log_level"] == "INFO"
    modules = defaults.get("modules")
    assert isinstance(modules, dict)
    assert modules["file-monitoring"]["extras"] == ["file-monitoring"]

