"""Tests for :mod:`raggd.core.config`."""

from __future__ import annotations

from pathlib import Path

import tomllib

import pytest

from raggd.core.config import (
    AppConfig,
    DbSettings,
    ModuleToggle,
    ParserModuleSettings,
    ParserGitignoreBehavior,
    ParserHandlerSettings,
    PARSER_MODULE_KEY,
    VdbModuleSettings,
    VDB_MODULE_KEY,
    WorkspaceSettings,
    _apply_module_overrides,
    _coerce_parser_module,
    _coerce_vdb_module,
    _coerce_toggle,
    _normalize_token_cap,
    _normalize_modules,
    iter_module_configs,
    iter_workspace_sources,
    load_config,
    load_packaged_defaults,
    render_user_config,
)
from raggd.source.models import WorkspaceSourceConfig
from pydantic import ValidationError


@pytest.fixture()
def defaults() -> dict[str, object]:
    return {
        "workspace": "/var/tmp/raggd",
        "log_level": "info",
        "modules": {
            "alpha": {
                "enabled": True,
                "extras": ["alpha-extra", "alpha-extra"],
            },
            "beta": {
                "enabled": False,
            },
        },
    }


def test_load_config_precedence(defaults: dict[str, object]) -> None:
    config = load_config(
        defaults=defaults,
        user_config={
            "log_level": "warning",
            "modules": {"alpha": {"enabled": False}},
        },
        env_config={
            "log_level": "error",
            "modules": {"gamma": {"enabled": True}},
        },
        cli_overrides={
            "log_level": "debug",
            "workspace": "~/workspaces/raggd",
        },
        module_overrides={
            "alpha": {"enabled": True},
            "beta": ModuleToggle(enabled=True),
        },
    )

    assert isinstance(config, AppConfig)
    assert config.log_level == "DEBUG"
    assert config.workspace == Path("~/workspaces/raggd").expanduser()

    alpha = config.modules["alpha"]
    assert alpha.enabled is True
    assert alpha.extras == ("alpha-extra",)

    beta = config.modules["beta"]
    assert beta.enabled is True

    gamma = config.modules["gamma"]
    assert gamma.enabled is True
    assert gamma.extras == ()


def test_load_config_invalid_override_type(defaults: dict[str, object]) -> None:
    with pytest.raises(TypeError):
        load_config(
            defaults=defaults,
            module_overrides={"alpha": 123},
        )


def test_load_config_invalid_db_payload(defaults: dict[str, object]) -> None:
    defaults_with_db = {**defaults, "db": "invalid"}

    with pytest.raises(TypeError):
        load_config(defaults=defaults_with_db)


def test_load_config_accepts_db_settings_instance(
    defaults: dict[str, object],
) -> None:
    defaults_with_db = {**defaults, "db": DbSettings(run_allow_outside=False)}

    config = load_config(defaults=defaults_with_db)

    assert isinstance(config.db, DbSettings)
    assert config.db.run_allow_outside is False


def test_render_user_config_includes_comments(
    defaults: dict[str, object],
) -> None:
    config = load_config(defaults=defaults)
    rendered = render_user_config(config)

    assert "Generated by raggd init" in rendered
    assert "Precedence: CLI flags" in rendered
    assert "[workspace]" in rendered
    assert "modules" in rendered
    # Extras should be serialized as a list in TOML.
    assert 'extras = ["alpha-extra"]' in rendered

    parsed = tomllib.loads(rendered)
    workspace_section = parsed["workspace"]
    assert workspace_section["root"] == str(config.workspace)

    db_section = parsed["db"]
    assert db_section["migrations_path"] == "resources/db/migrations"
    assert db_section["ensure_auto_upgrade"] is True
    assert db_section["vacuum_max_stale_days"] == 7
    assert db_section["vacuum_concurrency"] == "auto"
    assert db_section["run_allow_outside"] is True
    assert db_section["run_autocommit_default"] is False
    assert db_section["drift_warning_seconds"] == 0
    assert db_section["info_count_timeout_ms"] == 1000
    assert db_section["info_count_row_limit"] == 500000

    minimal = render_user_config(config, include_defaults=False)
    assert "Generated by" not in minimal
    assert "[workspace]" in minimal
    parsed_minimal = tomllib.loads(minimal)
    assert parsed_minimal["workspace"]["root"] == str(config.workspace)


def test_load_packaged_defaults_resource() -> None:
    defaults = load_packaged_defaults()

    assert defaults["workspace"] == "~/.raggd"
    assert defaults["log_level"] == "INFO"
    modules = defaults.get("modules")
    assert isinstance(modules, dict)
    assert modules["source"]["enabled"] is True
    assert modules["source"]["extras"] == []
    assert modules["db"]["enabled"] is True
    assert modules["db"]["extras"] == ["db"]
    assert modules["file-monitoring"]["extras"] == ["file-monitoring"]
    parser_defaults = modules["parser"]
    assert parser_defaults["enabled"] is True
    assert parser_defaults["extras"] == ["parser"]
    assert parser_defaults["general_max_tokens"] == 2000
    assert parser_defaults["max_concurrency"] == "auto"
    assert parser_defaults["fail_fast"] is False
    handlers = parser_defaults["handlers"]
    assert handlers["text"]["enabled"] is True
    assert "max_tokens" not in handlers["text"]

    vdb_defaults = modules["vdb"]
    assert vdb_defaults["enabled"] is True
    assert vdb_defaults["extras"] == ["vdb"]
    assert vdb_defaults["provider"] == "openai"
    assert vdb_defaults["model"] == "text-embedding-3-small"
    assert vdb_defaults["metric"] == "cosine"
    assert vdb_defaults["index_type"] == "IDMap,Flat"
    assert vdb_defaults["batch_size"] == "auto"
    assert vdb_defaults["max_concurrency"] == "auto"
    assert vdb_defaults["normalize"] is True
    assert vdb_defaults["max_input_tokens"] == 8192
    db_defaults = defaults.get("db")
    assert isinstance(db_defaults, dict)
    assert db_defaults["info_count_timeout_ms"] == 1000
    assert db_defaults["info_count_row_limit"] == 500000


def test_internal_module_helpers_cover_branches() -> None:
    toggle = _coerce_toggle(True)
    assert isinstance(toggle, ModuleToggle)
    assert toggle.enabled is True

    assert _normalize_modules(None) == {}

    base = {"alpha": ModuleToggle(enabled=False, extras=("alpha",))}
    overrides = {"beta": True}
    updated = _apply_module_overrides(base, overrides)
    assert "beta" in updated and updated["beta"].enabled is True

    layered = _apply_module_overrides(
        base,
        {"alpha": ModuleToggle(enabled=True)},
    )
    assert layered["alpha"].extras == ("alpha",)

    replaced = _apply_module_overrides(
        base,
        {"alpha": ModuleToggle(enabled=True, extras=("gamma",))},
    )
    assert replaced["alpha"].extras == ("gamma",)

    parser_base = _normalize_modules({PARSER_MODULE_KEY: {"enabled": True}})
    parser_overrides = _apply_module_overrides(
        parser_base,
        {PARSER_MODULE_KEY: {"enabled": False, "general_max_tokens": "auto"}},
    )
    parser_toggle = parser_overrides[PARSER_MODULE_KEY]
    assert isinstance(parser_toggle, ParserModuleSettings)
    assert parser_toggle.enabled is False
    assert parser_toggle.general_max_tokens == "auto"

    vdb_toggle = _coerce_vdb_module(True)
    assert isinstance(vdb_toggle, VdbModuleSettings)
    assert vdb_toggle.enabled is True

    vdb_base = _normalize_modules({VDB_MODULE_KEY: {"enabled": True}})
    assert isinstance(vdb_base[VDB_MODULE_KEY], VdbModuleSettings)

    vdb_overrides = _apply_module_overrides(
        vdb_base,
        {VDB_MODULE_KEY: {"enabled": False, "max_concurrency": 4}},
    )
    vdb_settings = vdb_overrides[VDB_MODULE_KEY]
    assert isinstance(vdb_settings, VdbModuleSettings)
    assert vdb_settings.enabled is False
    assert vdb_settings.max_concurrency == 4


def test_parser_module_settings_validates_thresholds() -> None:
    with pytest.raises(ValueError):
        ParserModuleSettings(
            lock_wait_warning_seconds=5.0,
            lock_wait_error_seconds=1.0,
        )

    with pytest.raises(ValueError):
        ParserModuleSettings(
            lock_contention_warning=2,
            lock_contention_error=1,
        )

    config = load_config(defaults={"modules": {"alpha": False}})
    pairs = list(iter_module_configs(config))
    assert pairs and pairs[0][0] == "alpha"


def test_workspace_settings_rejects_invalid_payload() -> None:
    with pytest.raises(TypeError):
        WorkspaceSettings.model_validate(123)

    with pytest.raises(ValidationError):
        WorkspaceSettings.model_validate({"sources": {"bad": 123}})

    with pytest.raises(TypeError):
        WorkspaceSettings.from_mapping({"sources": ["not-a-mapping"]})

    with pytest.raises(TypeError):
        WorkspaceSettings.from_mapping({"sources": {"alpha": 123}})


def test_workspace_settings_scalar_and_mapping_support() -> None:
    settings = WorkspaceSettings.model_validate("/tmp/workspace")
    assert settings.root == Path("/tmp/workspace").expanduser()

    mapped = WorkspaceSettings.model_validate(
        {
            "root": "/tmp/workspace",
            "sources": {
                "alpha": {
                    "name": "Alpha",
                    "path": "/tmp/workspace/sources/alpha",
                }
            },
        }
    )
    assert mapped.sources["alpha"].name == "alpha"

    empty = WorkspaceSettings.from_mapping(None)
    assert empty.sources == {}

    existing = WorkspaceSourceConfig(
        name="bravo",
        path=Path("/tmp/workspace/sources/bravo"),
    )
    from_existing = WorkspaceSettings.from_mapping(
        {"sources": {"bravo": existing}}
    )
    assert from_existing.sources["bravo"].name == "bravo"


def test_iter_workspace_sources_and_render_with_sources() -> None:
    defaults = {
        "workspace": {
            "root": "/tmp/workspace",
            "sources": {
                "alpha": {
                    "path": "/tmp/workspace/sources/alpha",
                    "enabled": True,
                    "target": "/tmp/project",
                }
            },
        },
    }

    config = load_config(defaults=defaults)
    pairs = list(iter_workspace_sources(config))
    assert pairs == [("alpha", config.workspace_sources["alpha"])]

    rendered = render_user_config(config)
    assert "[workspace.sources.alpha]" in rendered
    parsed = tomllib.loads(rendered)
    assert parsed["workspace"]["sources"]["alpha"]["enabled"] is True


def test_load_config_accepts_workspace_settings_instance() -> None:
    custom = WorkspaceSettings(root="/tmp/custom")
    config = load_config(defaults={"workspace": custom})

    assert config.workspace_settings is custom


def test_parser_settings_loaded_from_defaults() -> None:
    defaults = load_packaged_defaults()
    config = load_config(defaults=defaults)

    parser_settings = config.parser

    assert isinstance(parser_settings, ParserModuleSettings)
    assert parser_settings.enabled is True
    assert parser_settings.general_max_tokens == 2000
    assert parser_settings.max_concurrency == "auto"
    assert parser_settings.fail_fast is False
    assert (
        parser_settings.gitignore_behavior is ParserGitignoreBehavior.COMBINED
    )
    assert "text" in parser_settings.handlers
    text_handler = parser_settings.handlers["text"]
    assert text_handler.enabled is True
    assert text_handler.max_tokens is None


def test_render_user_config_serializes_parser_settings() -> None:
    defaults = load_packaged_defaults()
    config = load_config(defaults=defaults)

    rendered = render_user_config(config, include_defaults=False)
    parsed = tomllib.loads(rendered)
    parser_section = parsed["modules"]["parser"]

    assert parser_section["general_max_tokens"] == 2000
    assert parser_section["max_concurrency"] == "auto"
    assert parser_section["fail_fast"] is False
    assert parser_section["gitignore_behavior"] == "combined"
    assert "max_tokens" not in parser_section["handlers"]["markdown"]

    vdb_section = parsed["modules"]["vdb"]
    assert vdb_section["provider"] == "openai"
    assert vdb_section["model"] == "text-embedding-3-small"
    assert vdb_section["metric"] == "cosine"
    assert vdb_section["index_type"] == "IDMap,Flat"
    assert vdb_section["batch_size"] == "auto"
    assert vdb_section["max_concurrency"] == "auto"
    assert vdb_section["normalize"] is True
    assert vdb_section["max_input_tokens"] == 8192


def test_parser_settings_validation_errors() -> None:
    with pytest.raises(ValueError):
        ParserHandlerSettings(max_tokens="invalid")

    with pytest.raises(ValueError):
        ParserModuleSettings(max_concurrency="fast")

    with pytest.raises(ValueError):
        ParserModuleSettings(max_concurrency=0)

    with pytest.raises(ValueError):
        ParserModuleSettings(handlers={" ": ParserHandlerSettings()})

    with pytest.raises(ValueError):
        ParserModuleSettings._validate_max_concurrency("fast")

    with pytest.raises(ValueError):
        ParserModuleSettings._validate_max_concurrency(0)


def test_vdb_settings_validation_errors() -> None:
    with pytest.raises(ValueError):
        VdbModuleSettings(batch_size=0)

    with pytest.raises(ValueError):
        VdbModuleSettings(batch_size="invalid")

    with pytest.raises(ValueError):
        VdbModuleSettings(max_concurrency=0)

    with pytest.raises(ValueError):
        VdbModuleSettings(max_concurrency="fast")

    with pytest.raises(ValueError):
        VdbModuleSettings(provider=" ")

    with pytest.raises(ValueError):
        VdbModuleSettings(max_input_tokens=0)

    with pytest.raises(ValueError):
        VdbModuleSettings(max_input_tokens="fast")


def test_parser_coercion_helpers() -> None:
    module_toggle = ModuleToggle(enabled=True, extras=("parser",))
    coerced = _coerce_parser_module(module_toggle)
    assert isinstance(coerced, ParserModuleSettings)
    assert coerced.enabled is True

    mapping_coerced = _coerce_parser_module({"enabled": False})
    assert mapping_coerced.enabled is False

    bool_coerced = _coerce_parser_module(True)
    assert bool_coerced.enabled is True

    existing = ParserModuleSettings(enabled=False)
    same = _coerce_parser_module(existing)
    assert same is existing

    with pytest.raises(TypeError):
        _coerce_parser_module(123)


def test_app_config_parser_property_converts_toggle() -> None:
    config = load_config(defaults={})
    default_settings = config.parser
    assert isinstance(default_settings, ParserModuleSettings)
    assert default_settings.enabled is True

    config.modules[PARSER_MODULE_KEY] = ModuleToggle(enabled=False)

    settings = config.parser
    assert isinstance(settings, ParserModuleSettings)
    assert settings.enabled is False

    override = ParserModuleSettings(enabled=True, max_concurrency=3)
    config.modules[PARSER_MODULE_KEY] = override
    same_settings = config.parser
    assert same_settings is override


def test_app_config_vdb_property_converts_toggle() -> None:
    config = load_config(defaults={})

    default_settings = config.vdb
    assert isinstance(default_settings, VdbModuleSettings)
    assert default_settings.enabled is True

    config.modules[VDB_MODULE_KEY] = ModuleToggle(enabled=False)

    settings = config.vdb
    assert isinstance(settings, VdbModuleSettings)
    assert settings.enabled is False

    override = VdbModuleSettings(enabled=True, max_concurrency=5)
    config.modules[VDB_MODULE_KEY] = override
    assert config.vdb is override


def test_parser_normalize_token_cap_constraints() -> None:
    with pytest.raises(ValueError):
        _normalize_token_cap(None, allow_none=False)

    with pytest.raises(ValueError):
        _normalize_token_cap(0, allow_none=True)

    with pytest.raises(ValueError):
        _normalize_token_cap("invalid", allow_none=True)


def test_render_user_config_includes_handler_overrides() -> None:
    derived = ParserModuleSettings(
        handlers={"markdown": ParserHandlerSettings(max_tokens=500)}
    )
    config = load_config(defaults={"modules": {PARSER_MODULE_KEY: derived}})

    rendered = render_user_config(config, include_defaults=False)
    parsed = tomllib.loads(rendered)
    markdown_handler = parsed["modules"]["parser"]["handlers"]["markdown"]
    assert markdown_handler["max_tokens"] == 500
