"""Tests for :mod:`raggd.core.config`."""

from __future__ import annotations

from pathlib import Path

import tomllib

import pytest

from raggd.core.config import (
    AppConfig,
    ModuleToggle,
    WorkspaceSettings,
    _apply_module_overrides,
    _coerce_toggle,
    _normalize_modules,
    iter_module_configs,
    iter_workspace_sources,
    load_config,
    load_packaged_defaults,
    render_user_config,
)
from raggd.source.models import WorkspaceSourceConfig
from pydantic import ValidationError


@pytest.fixture()
def defaults() -> dict[str, object]:
    return {
        "workspace": "/var/tmp/raggd",
        "log_level": "info",
        "modules": {
            "alpha": {
                "enabled": True,
                "extras": ["alpha-extra", "alpha-extra"],
            },
            "beta": {
                "enabled": False,
            },
        },
    }


def test_load_config_precedence(defaults: dict[str, object]) -> None:
    config = load_config(
        defaults=defaults,
        user_config={
            "log_level": "warning",
            "modules": {"alpha": {"enabled": False}},
        },
        env_config={
            "log_level": "error",
            "modules": {"gamma": {"enabled": True}},
        },
        cli_overrides={
            "log_level": "debug",
            "workspace": "~/workspaces/raggd",
        },
        module_overrides={
            "alpha": {"enabled": True},
            "beta": ModuleToggle(enabled=True),
        },
    )

    assert isinstance(config, AppConfig)
    assert config.log_level == "DEBUG"
    assert config.workspace == Path("~/workspaces/raggd").expanduser()

    alpha = config.modules["alpha"]
    assert alpha.enabled is True
    assert alpha.extras == ("alpha-extra",)

    beta = config.modules["beta"]
    assert beta.enabled is True

    gamma = config.modules["gamma"]
    assert gamma.enabled is True
    assert gamma.extras == ()


def test_load_config_invalid_override_type(defaults: dict[str, object]) -> None:
    with pytest.raises(TypeError):
        load_config(
            defaults=defaults,
            module_overrides={"alpha": 123},
        )


def test_render_user_config_includes_comments(
    defaults: dict[str, object],
) -> None:
    config = load_config(defaults=defaults)
    rendered = render_user_config(config)

    assert "Generated by raggd init" in rendered
    assert "Precedence: CLI flags" in rendered
    assert "[workspace]" in rendered
    assert "modules" in rendered
    # Extras should be serialized as a list in TOML.
    assert 'extras = ["alpha-extra"]' in rendered

    parsed = tomllib.loads(rendered)
    workspace_section = parsed["workspace"]
    assert workspace_section["root"] == str(config.workspace)

    minimal = render_user_config(config, include_defaults=False)
    assert "Generated by" not in minimal
    assert "[workspace]" in minimal
    parsed_minimal = tomllib.loads(minimal)
    assert parsed_minimal["workspace"]["root"] == str(config.workspace)


def test_load_packaged_defaults_resource() -> None:
    defaults = load_packaged_defaults()

    assert defaults["workspace"] == "~/.raggd"
    assert defaults["log_level"] == "INFO"
    modules = defaults.get("modules")
    assert isinstance(modules, dict)
    assert modules["file-monitoring"]["extras"] == ["file-monitoring"]


def test_internal_module_helpers_cover_branches() -> None:
    toggle = _coerce_toggle(True)
    assert isinstance(toggle, ModuleToggle)
    assert toggle.enabled is True

    assert _normalize_modules(None) == {}

    base = {"alpha": ModuleToggle(enabled=False, extras=("alpha",))}
    overrides = {"beta": True}
    updated = _apply_module_overrides(base, overrides)
    assert "beta" in updated and updated["beta"].enabled is True

    layered = _apply_module_overrides(
        base,
        {"alpha": ModuleToggle(enabled=True)},
    )
    assert layered["alpha"].extras == ("alpha",)

    config = load_config(defaults={"modules": {"alpha": False}})
    pairs = list(iter_module_configs(config))
    assert pairs and pairs[0][0] == "alpha"


def test_workspace_settings_rejects_invalid_payload() -> None:
    with pytest.raises(TypeError):
        WorkspaceSettings.model_validate(123)

    with pytest.raises(ValidationError):
        WorkspaceSettings.model_validate({"sources": {"bad": 123}})

    with pytest.raises(TypeError):
        WorkspaceSettings.from_mapping({"sources": ["not-a-mapping"]})

    with pytest.raises(TypeError):
        WorkspaceSettings.from_mapping({"sources": {"alpha": 123}})


def test_workspace_settings_scalar_and_mapping_support() -> None:
    settings = WorkspaceSettings.model_validate("/tmp/workspace")
    assert settings.root == Path("/tmp/workspace").expanduser()

    mapped = WorkspaceSettings.model_validate(
        {
            "root": "/tmp/workspace",
            "sources": {
                "alpha": {
                    "name": "Alpha",
                    "path": "/tmp/workspace/sources/alpha",
                }
            },
        }
    )
    assert mapped.sources["alpha"].name == "alpha"

    empty = WorkspaceSettings.from_mapping(None)
    assert empty.sources == {}

    existing = WorkspaceSourceConfig(
        name="bravo",
        path=Path("/tmp/workspace/sources/bravo"),
    )
    from_existing = WorkspaceSettings.from_mapping({"sources": {"bravo": existing}})
    assert from_existing.sources["bravo"].name == "bravo"



def test_iter_workspace_sources_and_render_with_sources() -> None:
    defaults = {
        "workspace": {
            "root": "/tmp/workspace",
            "sources": {
                "alpha": {
                    "path": "/tmp/workspace/sources/alpha",
                    "enabled": True,
                    "target": "/tmp/project",
                }
            },
        },
    }

    config = load_config(defaults=defaults)
    pairs = list(iter_workspace_sources(config))
    assert pairs == [("alpha", config.workspace_sources["alpha"])]

    rendered = render_user_config(config)
    assert "[workspace.sources.alpha]" in rendered
    parsed = tomllib.loads(rendered)
    assert parsed["workspace"]["sources"]["alpha"]["enabled"] is True


def test_load_config_accepts_workspace_settings_instance() -> None:
    custom = WorkspaceSettings(root="/tmp/custom")
    config = load_config(defaults={"workspace": custom})

    assert config.workspace_settings is custom
